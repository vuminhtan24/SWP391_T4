package util;

import dal.SalesDAO;
import java.util.*;
import jakarta.mail.*;
import jakarta.mail.internet.*;

public class ReportScheduler {

    private static final String SENDER_EMAIL = "dangquangkhai261104@gmail.com";    // Email g·ª≠i
    private static final String APP_PASSWORD = "jafemfcyoapoyytm";                 // App password

    // ‚úÖ Danh s√°ch email nh·∫≠n b√°o c√°o
    private static final String[] RECIPIENTS = {
        "khaidhe186918@fpt.edu.vn",
        "leninmactuan@gmail.com"
    };

    public static void sendDailyReport() {
        try {
            // 1. T·∫°o n·ªôi dung email
            String subject = "üìä B√°o c√°o doanh thu ng√†y " + java.time.LocalDate.now();
            String content = buildReportContent();

            // 2. C·∫•u h√¨nh Gmail SMTP
            Properties props = new Properties();
            props.put("mail.smtp.host", "smtp.gmail.com");
            props.put("mail.smtp.port", "587");
            props.put("mail.smtp.auth", "true");
            props.put("mail.smtp.starttls.enable", "true");

            // 3. X√°c th·ª±c Gmail
            Session session = Session.getInstance(props, new Authenticator() {
                protected PasswordAuthentication getPasswordAuthentication() {
                    return new PasswordAuthentication(SENDER_EMAIL, APP_PASSWORD);
                }
            });

            // 4. G·ª≠i cho t·ª´ng email
            for (String recipient : RECIPIENTS) {
                Message message = new MimeMessage(session);
                message.setFrom(new InternetAddress(SENDER_EMAIL));
                message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(recipient));
                message.setSubject(subject);
                message.setContent(content, "text/html; charset=UTF-8");

                Transport.send(message);
                System.out.println("‚úÖ ƒê√£ g·ª≠i b√°o c√°o t·ªõi: " + recipient);
            }

        } catch (MessagingException e) {
            System.out.println("‚ùå G·ª≠i email th·∫•t b·∫°i.");
        }
    }

    private static String buildReportContent() {
        SalesDAO dao = new SalesDAO();

        int todayOrders = dao.getTodayOrderCount();
        double thisMonthRevenue = dao.getThisMonthRevenue();
        double totalRevenue = dao.getTotalRevenue();

        // N·ªôi dung HTML
        return "<h2>üìà B√°o c√°o doanh thu</h2>"
                + "<ul>"
                + "<li><strong>ƒê∆°n h√¥m nay:</strong> " + todayOrders + "</li>"
                + "<li><strong>Doanh thu th√°ng:</strong> " + thisMonthRevenue + " VND</li>"
                + "<li><strong>T·ªïng doanh thu:</strong> " + totalRevenue + " VND</li>"
                + "</ul>"
                + "<p>Tr√¢n tr·ªçng,<br>H·ªá th·ªëng LaFioreria</p>";
    }

    public static void scheduleDailyReport() {
        Timer timer = new Timer();

        Calendar calendar = Calendar.getInstance();
        calendar.set(Calendar.HOUR_OF_DAY, 7);
        calendar.set(Calendar.MINUTE, 0);
        calendar.set(Calendar.SECOND, 0);

        if (calendar.getTime().before(new Date())) {
            calendar.add(Calendar.DATE, 1);
        }

        Date firstTime = calendar.getTime();
        long period = 24 * 60 * 60 * 1000;

        timer.schedule(new TimerTask() {
            public void run() {
                sendDailyReport();
            }
        }, firstTime, period);

        System.out.println("üïí ƒê√£ l√™n l·ªãch g·ª≠i email t·ª± ƒë·ªông h√†ng ng√†y l√∫c 7h s√°ng.");
    }
}
